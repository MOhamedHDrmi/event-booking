/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.musalasoft.eventbooking.rest.api;

import com.musalasoft.eventbooking.rest.model.CreateEvent201Response;
import org.springframework.format.annotation.DateTimeFormat;
import com.musalasoft.eventbooking.rest.model.EventRequestDTO;
import com.musalasoft.eventbooking.rest.model.EventResponseDTO;
import com.musalasoft.eventbooking.rest.model.EventTicketResponseDTO;
import java.time.LocalDate;
import com.musalasoft.eventbooking.rest.model.TicketRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-10T15:36:30.869585+03:00[Africa/Cairo]")
@Validated
@Tag(name = "events", description = "the events API")
@RequestMapping("${openapi.eventBooking.base-path:}")
public interface EventsApi {

    /**
     * DELETE /events/tickets/{ticketId} : Cancel reservation for an event.
     * This endpoint allows customers to cancel ticket for an event.
     *
     * @param ticketId The ID of the reservation to cancel. (required)
     * @return No content (status code 202)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "cancelEventTicket",
        summary = "Cancel reservation for an event.",
        tags = { "tickets" },
        responses = {
            @ApiResponse(responseCode = "202", description = "No content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        },
        security = {
            @SecurityRequirement(name = "Bearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/events/tickets/{ticketId}"
    )
    ResponseEntity<Void> cancelEventTicket(
        @Parameter(name = "ticketId", description = "The ID of the reservation to cancel.", required = true) @PathVariable("ticketId") Long ticketId
    );


    /**
     * POST /events : Create a new event.
     * This endpoint allows customers to create a new event.
     *
     * @param event The event to create. (optional)
     * @return Created (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "createEvent",
        summary = "Create a new event.",
        tags = { "events" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateEvent201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        },
        security = {
            @SecurityRequirement(name = "Bearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/events",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CreateEvent201Response> createEvent(
        @Parameter(name = "event", description = "The event to create.") @Valid @RequestBody(required = false) EventRequestDTO event
    );


    /**
     * GET /events : Get all events or search for events.
     * This endpoint allows customers to retrieve all events or search for events by name, date range or category.
     *
     * @param name The name of the event to search for. (optional)
     * @param startDate The start date of the date range to search for events in (inclusive). (optional)
     * @param endDate The end date of the date range to search for events in (inclusive). (optional)
     * @param category The category of the event to search for. (optional)
     * @return OK (status code 200)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "getAll",
        summary = "Get all events or search for events.",
        tags = { "events" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EventResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/events",
        produces = { "application/json" }
    )
    ResponseEntity<List<EventResponseDTO>> getAll(
        @Parameter(name = "name", description = "The name of the event to search for.") @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "startDate", description = "The start date of the date range to search for events in (inclusive).") @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(name = "endDate", description = "The end date of the date range to search for events in (inclusive).") @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @Parameter(name = "category", description = "The category of the event to search for.") @Valid @RequestParam(value = "category", required = false) String category
    );


    /**
     * GET /events/tickets : Get all booked events.
     * This endpoint allows customers to retrieve all booked events.
     *
     * @return OK (status code 200)
     *         or Not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "getAllBooked",
        summary = "Get all booked events.",
        tags = { "tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EventTicketResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        },
        security = {
            @SecurityRequirement(name = "Bearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/events/tickets",
        produces = { "application/json" }
    )
    ResponseEntity<List<EventTicketResponseDTO>> getAllBooked(
        
    );


    /**
     * POST /events/{eventId}/tickets : Reserve tickets for an event.
     * This endpoint allows customers to reserve tickets for an event.
     *
     * @param eventId The ID of the event to reserve tickets for. (required)
     * @param ticketRequest The ticket reservation request. (optional)
     * @return Created (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "reserveEventTicket",
        summary = "Reserve tickets for an event.",
        tags = { "tickets" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        },
        security = {
            @SecurityRequirement(name = "Bearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/events/{eventId}/tickets",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> reserveEventTicket(
        @Parameter(name = "eventId", description = "The ID of the event to reserve tickets for.", required = true) @PathVariable("eventId") Long eventId,
        @Parameter(name = "ticketRequest", description = "The ticket reservation request.") @Valid @RequestBody(required = false) TicketRequest ticketRequest
    );

}
